#include <iostream>
#include <cmath>
using namespace std;

class Trapeze
{
    float sidea;
    float sideb;
    float Toph;

    float area;

    public:

    Trapeze()
    {
        sidea=0;
        sideb=0;
        Toph=0;
        area=0;
    }
    Trapeze(float a, float b, float h)
    {

        sidea=a;
        sideb=b;
        Toph=h;
        area = 0;
        calc();
    }
    void setSideA(float a)
    {
        sidea = a;
    }
    void setSideB(float b)
    {
        sideb = b;
    }
    void setTopH(float h)
    {
        Toph = h;
    }

    void calc()
    {
        area = (0.5*(sidea+sideb)*Toph);
    }

    friend ostream &operator<<(ostream &t, Trapeze &obj)
    {
    t << "\nsidea\t" << obj.sidea << "\nsideb\t" << obj.sideb << "\nToph\t" << obj.Toph<< "\nArea\t" << obj.area  ;
    return t;
    }


    void getArea()
    {
        cout << "\n "<<area ;
    }
    void getSide()
    {
        cout << "\n "<<sidea ;
        cout << "\n "<<sideb ;
        cout << "\n "<<Toph ;
    }

    friend Trapeze operator + (Trapeze &s, Trapeze &c);
    friend Trapeze operator ++ (Trapeze &s);

};

Trapeze operator + (Trapeze &s, Trapeze &c)
    {
    Trapeze temp;
    temp.sidea = s.sidea + c.sidea;
    temp.sideb = s.sideb + c.sideb;
    temp.Toph = s.Toph + c.Toph;
    temp.area = s.area + c.area;
    return temp;

    }

Trapeze operator ++ (Trapeze &ss)
 {
  Trapeze temp;
  temp.sidea = ss.sidea +1;
  temp.sideb = ss.sideb +1;
  temp.Toph = ss.Toph +1;
  return temp;
 }
int main()
{
  Trapeze c;
  Trapeze c1;
  Trapeze a(7, 6, 4);
  Trapeze b(7, 4, 3);
  cout << a  ;
  c=a+b;

  c.getSide() ;
  c.getArea() ;
  c1=++c;
  c1.getSide();
}
